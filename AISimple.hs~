module AISimple where

import Board
import Interactive

{-
    *** TODO ***

    Întoarce tabla rezultată din aplicarea acelei mutări care maximizează
    scorul adversarului.
-}

getHouse :: Player -> Board -> House
getHouse player (Board h1 h2 l1 l2 p) =
 
	if (player == You)
		then 
			h2
		else
			h1

findMaximum :: Int -> Player -> [(House, Board)] -> [(House, Board)]
findMaximum max  player vec_succesor =	
	if (vec_succesor == [])
		then 
			[]
		else
			if (max > current)
				then
					[head vec_succesor] ++ (findMaximum current player (tail vec_succesor)) 
				else
					findMaximum max player (tail vec_succesor)
	where
		current = getHouse player (snd (head vec_succesor))
				

step :: Board -> (House, Board)
step (Board house1 house2 list1 list2 player) = 
	  head $ reverse $ (findMaximum 100 player (successors (Board house1 house2 list1 list2 player))) 
	
{-
    Urmărește pas cu pas evoluția jocului, conform strategiei implementate.
-}
userMode :: IO ()
userMode = humanVsAI step

